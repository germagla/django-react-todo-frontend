{"version":3,"sources":["components/Modal.js","App.js","reportWebVitals.js","index.js"],"names":["CustomModal","props","handleChange","e","target","name","value","type","checked","activeItem","state","setState","this","toggle","onSave","Modal","isOpen","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","id","title","onChange","placeholder","description","check","completed","ModalFooter","Button","color","onClick","Component","App","context","refreshList","axios","get","then","res","toDoList","data","console","log","catch","err","modal","handleSubmit","item","put","post","handleDelete","delete","createItem","editItem","displayCompleted","status","viewCompleted","renderTabList","className","renderItems","filter","map","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2bba74b5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Form,\n    FormGroup,\n    Input,\n    Label,\n} from \"reactstrap\";\n\nexport default class CustomModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeItem: this.props.activeItem,\n        };\n    }\n\n    handleChange = (e) => {\n        let { name, value } = e.target;\n\n        if (e.target.type === \"checkbox\") {\n            value = e.target.checked;\n        }\n\n        const activeItem = { ...this.state.activeItem, [name]: value };\n\n        this.setState({ activeItem });\n    };\n\n    render() {\n        const { toggle, onSave } = this.props;\n\n        return (\n            <Modal isOpen={true} toggle={toggle}>\n                <ModalHeader toggle={toggle}>Todo Item</ModalHeader>\n                <ModalBody>\n                    <Form>\n                        <FormGroup>\n                            <Label for=\"todo-title\">Title</Label>\n                            <Input\n                                type=\"text\"\n                                id=\"todo-title\"\n                                name=\"title\"\n                                value={this.state.activeItem.title}\n                                onChange={this.handleChange}\n                                placeholder=\"Enter Todo Title\"\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"todo-description\">Description</Label>\n                            <Input\n                                type=\"text\"\n                                id=\"todo-description\"\n                                name=\"description\"\n                                value={this.state.activeItem.description}\n                                onChange={this.handleChange}\n                                placeholder=\"Enter Todo description\"\n                            />\n                        </FormGroup>\n                        <FormGroup check>\n                            <Label check>\n                                <Input\n                                    type=\"checkbox\"\n                                    name=\"completed\"\n                                    checked={this.state.activeItem.completed}\n                                    onChange={this.handleChange}\n                                />\n                                Completed\n                            </Label>\n                        </FormGroup>\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n                    <Button\n                        color=\"success\"\n                        onClick={() => onSave(this.state.activeItem)}\n                    >\n                        Save\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n}","import './App.css';\nimport React from 'react';\nimport Modal from \"./components/Modal\";\nimport axios from \"axios\";\n\n\nclass App extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            viewCompleted: false,\n            toDoList: [],\n            modal: false,\n            activeItem: {\n                title: \"\",\n                description: \"\",\n                completed: false,\n\n            },\n        }\n    }\n\n    componentDidMount() {\n        this.refreshList();\n    }\n\n    refreshList = () => {\n        axios\n            .get(\"https://django-react-todo-backend.herokuapp.com/api/todos/\")\n            .then((res) => {\n                this.setState({toDoList: res.data});\n                console.log(res.data);\n            })\n            .catch((err) => console.log(err));\n    };\n\n    toggle = () => {\n        this.setState({modal: !this.state.modal});\n    };\n\n    handleSubmit = (item) => {\n        this.toggle();\n\n        if (item.id) {\n            axios\n                .put(`https://django-react-todo-backend.herokuapp.com/api/todos/${item.id}/`, item)\n                .then(() => this.refreshList());\n            return;\n        }\n        axios\n            .post(\"https://django-react-todo-backend.herokuapp.com/api/todos/\", item)\n            .then(() => this.refreshList());\n    };\n\n    handleDelete = (item) => {\n        axios\n            .delete(`https://django-react-todo-backend.herokuapp.com/api/todos/${item.id}/`)\n            .then(() => this.refreshList());\n    };\n\n    createItem = () => {\n        const item = {title: \"\", description: \"\", completed: false};\n\n        this.setState({activeItem: item, modal: !this.state.modal});\n    };\n\n    editItem = (item) => {\n        this.setState({activeItem: item, modal: !this.state.modal});\n    };\n\n    displayCompleted = (status) => status ? this.setState({viewCompleted: true}) : this.setState({viewCompleted: false});\n\n    renderTabList = () => {\n        return (\n            <div className=\"nav nav-tabs\">\n                <span className={this.state.viewCompleted ? \"nav-link active\" : \"nav-link\"}\n                      onClick={() => this.displayCompleted(true)}>\n                    Complete\n                </span>\n                <span className={this.state.viewCompleted ? \"nav-link\" : \"nav-link active\"}\n                      onClick={() => this.displayCompleted(false)}>\n                    Incomplete\n                </span>\n            </div>\n        )\n    };\n    renderItems = () => {\n        const {viewCompleted} = this.state;\n        const newItems = this.state.toDoList.filter(item => item.completed === viewCompleted);\n        return newItems.map(item => (\n            <li key={item.id} className=\"list-group-item d-flex justify-content-between align-items-center\">\n                <span className={`todo-title mr-2 ${this.state.viewCompleted ? \"completed-todo\" : \"\"}`}\n                      title={item.description}>\n                    {item.title}\n                </span>\n                <span>\n                    <button className=\"btn btn-secondary mr-2\" onClick={() => this.editItem(item)}>Edit</button>\n                    <button className=\"btn btn-danger\" onClick={() => this.handleDelete(item)}>Delete</button>\n                </span>\n            </li>\n        ))\n    };\n\n    render() {\n        return (\n            <main className=\"container\">\n                <h1 className=\"text-black text-uppercase text-center my-4\">To-do App</h1>\n                <div className=\"row\">\n                    <div className=\"col-md-6 col-sm-10 mx-auto p-0\">\n                        <div className=\"card p-3\">\n                            <div className=\"mb-4\">\n                                <button className=\"btn btn-primary\" onClick={() => this.createItem()}>Add Task</button>\n                            </div>\n                            {this.renderTabList()}\n                            <ul className=\"list-group list-group-flush border-top-0\">\n                                {this.renderItems()}\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n                {this.state.modal ? (\n                    <Modal\n                        activeItem={this.state.activeItem}\n                        toggle={this.toggle}\n                        onSave={this.handleSubmit}\n                    />\n                ) : null}\n            </main>\n        );\n    }\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}